package chapter7_1

import "fmt"

// 接口

// 一个具体的类型可以准确的描述它所代表的值，并且展示出对类型本身的一些操作方式：就像数字类型的算术操作，切片类型的取下标、添加元素和范围获取操作。
// 在Go语言中还存在着另外一种类型：接口类型。接口类型是一种抽象的类型。它不会暴露出它所代表的对象的内部值的结构和这个对象支持的基础操作的集合；它们只会表现出它们自己的方法。

// 举例:
// fmt.Printf，它会把结果写到标准输出，和fmt.Sprintf，它会把结果以字符串的形式返回。实际上，这两个函数都使用了另一个函数fmt.Fprintf来进行封装。
// Fprintf的前缀F表示文件(File)也表明格式化输出结果应该被写入第一个参数提供的文件中。
// 在Printf函数中的第一个参数os.Stdout是*os.File类型；
// 在Sprintf函数中的第一个参数&buf是一个指向可以写入字节的内存缓冲区，然而它 并不是一个文件类型尽管它在某种意义上和文件类型相似。
// 即使Fprintf函数中的第一个参数也不是一个文件类型。它是io.Writer类型，这是一个接口类型

func Interface() {
	var str string = fmt.Sprintf("")
	fmt.Printf("str : %s\n", str)
}

// 约定
// io.Writer类型定义了函数Fprintf和这个函数调用者之间的约定。
// 一方面这个约定需要调用者提供具体类型的值就像*os.File和*bytes.Buffer，这些类型都有一个特定签名和行为的Write的函数。
// 另一方面这个约定保证了Fprintf接受任何满足io.Writer接口的值都可以工作。
// Fprintf函数可能没有假定写入的是一个文件或是一段内存，而是写入一个可以调用Write函数的值。
